/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashmap.tree.intersection;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class App {

    private final HashMap<Integer, Integer> hashMap = new HashMap<>();
    private final List<Integer> intersections = new ArrayList<>();

    public static void main(String[] args) {
        App app = new App();

        BinaryTree tree1 = new BinaryTree();
        tree1.setRoot(new Node(150));
        tree1.getRoot().setLeft(new Node(100));
        tree1.getRoot().setRight(new Node(250));
        tree1.getRoot().getLeft().setLeft(new Node(75));
        tree1.getRoot().getLeft().setRight(new Node(160));
        tree1.getRoot().getRight().setLeft(new Node(200));
        tree1.getRoot().getRight().setRight(new Node(350));
        tree1.getRoot().getLeft().getRight().setLeft(new Node(125));
        tree1.getRoot().getLeft().getRight().setRight(new Node(175));
        tree1.getRoot().getRight().getRight().setLeft(new Node(300));
        tree1.getRoot().getRight().getRight().setRight(new Node(500));

        BinaryTree tree2 = new BinaryTree();
        tree2.setRoot(new Node(42));
        tree2.getRoot().setLeft(new Node(100));
        tree2.getRoot().setRight(new Node(600));
        tree2.getRoot().getLeft().setLeft(new Node(15));
        tree2.getRoot().getLeft().setRight(new Node(160));
        tree2.getRoot().getRight().setLeft(new Node(200));
        tree2.getRoot().getRight().setRight(new Node(350));
        tree2.getRoot().getLeft().getRight().setLeft(new Node(125));
        tree2.getRoot().getLeft().getRight().setRight(new Node(175));
        tree2.getRoot().getRight().getRight().setLeft(new Node(4));
        tree2.getRoot().getRight().getRight().setRight(new Node(500));

        System.out.println(app.treeIntersection(tree1, tree2).toString());
    }

    public List<Integer> treeIntersection(BinaryTree tree1, BinaryTree tree2){
        if (tree1.getRoot() == null || tree2.getRoot() == null) {
            return null;
        }
        traverse(tree1.getRoot());

        compare(tree2.getRoot());

        return intersections;
    }

    private void traverse(Node node) {
        if (node != null) {
            hashMap.put(node.getKey(), 1); // constant value cuz i only need the key to compare

            traverse(node.getLeft());
            traverse(node.getRight());
        }
    }

    private void compare(Node node){
        if (node != null) {
            if (hashMap.get(node.getKey()) != null){
                intersections.add(node.getKey());
            }
            compare(node.getLeft());
            compare(node.getRight());
        }
    }


}
