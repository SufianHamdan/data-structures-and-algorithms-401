/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package data.structures.and.algorithms;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;


class AppTest {
    private LinkedList<Integer> testList;
    private LinkedList<Integer> testList1;
    private LinkedList<Integer> testList2;
    private LinkedList<Integer> mergedList;

    @Test
    public void testInsert(){
        testList = new LinkedList<>();
        testList.insert(5);
        assertEquals("{5} -> Null", testList.toString());
    }

    @Test
    public void testIsIncludedFalse(){
        testList = new LinkedList<>();
        testList.insert(5);
        assertEquals(false, testList.isIncluded(50));
    }

    @Test
    public void testIsIncludedTrue(){
        testList = new LinkedList<>();
        testList.insert(5);
        testList.insert(6);
        assertEquals(true, testList.isIncluded(6));
    }

    @Test
    public void testToString(){
        testList = new LinkedList<>();
        testList.insert(5);
        testList.insert(6);
        assertEquals("{5} -> {6} -> Null", testList.toString());
    }

    @Test
    public void testChangeValueAtPosition(){
        testList = new LinkedList<>();
        testList.insert(5);
        testList.insert(6);
        testList.insert(9);
        testList.ChangeValueAtPosition(2, 2);
        assertEquals("{5} -> {2} -> {9} -> Null", testList.toString());
    }

    @Test
    public void testChangeValueAtPositionFalse(){
        testList = new LinkedList<>();
        testList.insert(5);
        testList.insert(6);
        testList.insert(9);
        testList.ChangeValueAtPosition(60, 2);
        assertEquals("{5} -> {6} -> {9} -> Null", testList.toString());
    }

    @Test
    public void testSize(){
        testList = new LinkedList<>();
        testList.insert(5);
        testList.insert(6);
        testList.insert(9);
        assertEquals(3, testList.size);
    }

    @Test
    public void testInsertBefore(){
        testList = new LinkedList<>();
        testList.insert(5);
        testList.insert(6);
        testList.insert(9);
        testList.insertBefore(6, 13);
        testList.insertBefore(5, 16);
        assertEquals("{16} -> {5} -> {13} -> {6} -> {9} -> Null", testList.toString());
    }

    @Test
    public void testLinkedListZip(){
        testList1 = new LinkedList<>();
        testList2 = new LinkedList<>();
        mergedList = new LinkedList<>();

        testList1.insert(1);
        testList1.insert(3);
        testList1.insert(5);

        testList2.insert(2);
        testList2.insert(4);
        testList2.insert(6);

        assertEquals("{1} -> {2} -> {3} -> {4} -> {5} -> {6} -> Null", mergedList.linkedListZip(testList1, testList2).toString());

        testList1 = new LinkedList<>();
        testList2 = new LinkedList<>();
        mergedList = new LinkedList<>();


        testList2.insert(2);
        testList2.insert(4);
        testList2.insert(6);


        assertEquals("{2} -> {4} -> {6} -> Null", mergedList.linkedListZip(testList1, testList2).toString());

        testList1 = new LinkedList<>();
        testList2 = new LinkedList<>();
        mergedList = new LinkedList<>();


        testList1.insert(2);
        testList1.insert(4);
        testList1.insert(6);


        assertEquals("{2} -> {4} -> {6} -> Null", mergedList.linkedListZip(testList1, testList2).toString());

        testList1 = new LinkedList<>();
        testList2 = new LinkedList<>();
        mergedList = new LinkedList<>();

        testList2.insert(2);
        testList2.insert(4);
        testList2.insert(6);
        testList2.insert(20);
        testList2.insert(30);

        testList1.insert(2);
        testList1.insert(4);
        testList1.insert(6);


        assertEquals("{2} -> {2} -> {4} -> {4} -> {6} -> {6} -> {20} -> {30} -> Null", mergedList.linkedListZip(testList1, testList2).toString());

        testList1 = new LinkedList<>();
        testList2 = new LinkedList<>();
        mergedList = new LinkedList<>();

        testList2.insert(2);
        testList2.insert(4);
        testList2.insert(6);

        testList1.insert(2);
        testList1.insert(4);
        testList1.insert(6);
        testList1.insert(20);
        testList1.insert(30);


        assertEquals("{2} -> {2} -> {4} -> {4} -> {6} -> {6} -> {20} -> {30} -> Null", mergedList.linkedListZip(testList1, testList2).toString());
    }
}
