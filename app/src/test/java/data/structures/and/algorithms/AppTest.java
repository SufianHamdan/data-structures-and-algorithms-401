/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package data.structures.and.algorithms;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;


class AppTest {
    private LinkedList<Integer> testList;

    @Test
    public void testInsert(){
        testList = new LinkedList<>();
        testList.insert(5);
        assertEquals("{5} -> Null", testList.toString());
    }

    @Test
    public void testIsIncludedFalse(){
        testList = new LinkedList<>();
        testList.insert(5);
        assertEquals(false, testList.isIncluded(50));
    }

    @Test
    public void testIsIncludedTrue(){
        testList = new LinkedList<>();
        testList.insert(5);
        testList.insert(6);
        assertEquals(true, testList.isIncluded(6));
    }

    @Test
    public void testToString(){
        testList = new LinkedList<>();
        testList.insert(5);
        testList.insert(6);
        assertEquals("{5} -> {6} -> Null", testList.toString());
    }

    @Test
    public void testChangeValueAtPosition(){
        testList = new LinkedList<>();
        testList.insert(5);
        testList.insert(6);
        testList.insert(9);
        testList.ChangeValueAtPosition(2, 2);
        assertEquals("{5} -> {2} -> {9} -> Null", testList.toString());
    }

    @Test
    public void testChangeValueAtPositionFalse(){
        testList = new LinkedList<>();
        testList.insert(5);
        testList.insert(6);
        testList.insert(9);
        testList.ChangeValueAtPosition(60, 2);
        assertEquals("{5} -> {6} -> {9} -> Null", testList.toString());
    }

    @Test
    public void testSize(){
        testList = new LinkedList<>();
        testList.insert(5);
        testList.insert(6);
        testList.insert(9);
        assertEquals(3, testList.size);
    }

    @Test
    public void testInsertBefore(){
        testList = new LinkedList<>();
        testList.insert(5);
        testList.insert(6);
        testList.insert(9);
        testList.insertBefore(6, 13);
        testList.insertBefore(5, 16);
        assertEquals("{16} -> {5} -> {13} -> {6} -> {9} -> Null", testList.toString());
    }
    @Test
    public void testKFromTheEnd() {
        LinkedList<String> testList = new LinkedList<>();
        // Should return 'null' if called on empty list.
        assertNull(null, testList.kthFromEnd(0));
        testList.insert("1");
        //Should return first and only value '1' if k is '0'
        assertEquals("1", testList.kthFromEnd(0));
        // Should return 'null' if k > than the list length.
        assertNull(null, testList.kthFromEnd(2));
        testList.insert("2");
        testList.insert("3");
        testList.insert("4");
        testList.insert("5");
        // testList is now: {1, 2, 3, 4, 5}
        //Confirm '1' is at the head of list
        assertEquals("1", testList.getHeadValue());
        //Confirm '5' is at the tail of list
        assertEquals("5", testList.getLastValue());
        //Should return '5' when k is 0
        assertEquals("5", testList.kthFromEnd(0));
        //Should return '4' when k is 1
        assertEquals("4", testList.kthFromEnd(1));
        //Should return '3' when k is 2
        assertEquals("3", testList.kthFromEnd(2));
        //Should return '2' when k is 3
        assertEquals("2", testList.kthFromEnd(3));
        //Should return '1' when k is 4
        assertEquals("1", testList.kthFromEnd(4));
        //Should return 'null' when k is > 4
        assertNull(null, testList.kthFromEnd(5));
        //Should return 'null' when k is > 4
        assertNull(null, testList.kthFromEnd(100));
        //Should also return null if given negative k
        assertNull(null, testList.kthFromEnd(-1));
    }


}
